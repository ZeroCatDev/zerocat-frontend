import{d as n,l as s}from"./db-BzvkWQI0.js";import{J as o}from"./index-BdsR-OvF.js";async function y(t){return Array.isArray(t)||(t=[t]),Promise.all(t.map(e=>n.projects.get(Number(e)).then(a=>a||{id:e,cached:!1,title:"未知项目",description:"项目信息未缓存",authorid:0,type:"scratch",licence:"unknow",state:"unknow",view_count:0,time:0,tags:[],source:"unknow"}))).then(e=>t.length===1?e[0]:e)}async function i(t){if(t.id=Number(t.id),await n.projects.get(t.id))return await n.projects.put(t),`项目 ${t.title} 更新成功.`;{const a=await n.projects.add(t);return`项目 ${t.title} 成功缓存. 获取到id为 ${a}`}}async function f(t){try{return Array.isArray(t)||(t=[t]),(await Promise.all(t.map(async a=>await i(a)))).join(`
`)}catch(e){return`添加缓存失败: ${e}`}}async function h(t){try{const e=await n.projects.get(Number(t));return e?(await n.projects.delete(Number(t)),`项目 ${e.title} 删除成功.`):`删除 ${t} 失败: Project not found`}catch(e){return`删除 ${t} 失败: ${e}`}}async function m(t){Array.isArray(t)||(t=[t]);try{return(await Promise.all(t.map(async a=>{const r=await o.get(`/project/${a}`),c={id:r.id,type:r.type,licence:r.licence,authorid:r.authorid,state:r.state,view_count:r.view_count,time:r.time,title:r.title,description:r.description,tags:r.tags,source:r.source};return await i(c)}))).join(`
`)}catch(e){return`刷新失败: ${e}`}}function w(t,e){return Array.isArray(t)||(t=[t]),s(()=>n.projects.where("id").anyOf(t).toArray()).subscribe(e)}export{f as a,m as b,y as f,w as l,h as r};
