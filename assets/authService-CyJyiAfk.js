import{Y as n,ai as o}from"./index-DKqePUrh.js";const u={register:async t=>{var e,s;try{const a=await n.post("/account/register",t);return{status:a.data.status,message:a.data.message,userId:a.data.userId,username:a.data.username,needVerify:a.data.needVerify||!1,needPassword:a.data.needPassword||!1,setupUrl:a.data.setupUrl,temporaryToken:a.data.temporaryToken}}catch(a){return console.error("Registration error:",a),{status:"error",message:((s=(e=a.response)==null?void 0:e.data)==null?void 0:s.message)||"Registration failed, please try again."}}},loginWithPassword:async(t,e,s=null)=>{const a={un:t,pw:e};s&&(a.captcha=s);const r=await n.post("/account/login",a);return r.data.status==="success"&&await i(r.data),r.data},sendLoginCode:async(t,e=null)=>{const s={email:t};return e&&(s.captcha=e),(await n.post("/account/send-login-code",s)).data},loginWithCode:async(t,e)=>{const s=await n.post("/account/login-with-code",{email:t,code:e});return s.data.status==="success"&&await i(s.data),s.data},generateMagicLink:async(t,e=null,s=null)=>{const a={email:t};return e&&(a.redirect=e),s&&(a.captcha=s),(await n.post("/account/magiclink/generate",a)).data},sendPasswordResetCode:async t=>(await n.post("/account/retrievePassword",{email:t})).data,resetPasswordWithCode:async(t,e,s)=>(await n.post("/account/reset-password",{email:t,verificationCode:e,newPassword:s})).data,validateMagicLink:async t=>{const e=await n.get(`/account/magiclink/validate?token=${t}`);return e.data.status==="success"&&await i(e.data),e.data},oauthRedirect:t=>{const e=o.getToken();return`https://zerocat-api.houlangs.com/account/oauth/${t}?token=${e}`},logout:async()=>o.logout(),refreshToken:async()=>{const t=o.getRefreshToken();if(!t)return{status:"error",message:"No refresh token available"};try{const e=await n.post("/account/refresh-token",{refresh_token:t});return e.data.status==="success"&&o.updateToken(e.data.token,e.data.expires_at),e.data}catch{return{status:"error",message:"Failed to refresh token"}}},resendVerificationEmail:async t=>{var e,s;try{const a=await n.post("/account/register/resend-verification-email",{token:t});return{status:a.data.status,message:a.data.message,expiresIn:a.data.expiresIn,temporaryToken:a.data.temporaryToken}}catch(a){return console.error("Error resending verification email:",a),{status:"error",message:((s=(e=a.response)==null?void 0:e.data)==null?void 0:s.message)||"Failed to resend verification email, please try again."}}},changeRegisterEmail:async(t,e)=>{var s,a;try{const r=await n.post("/account/register/change-register-email",{token:t,email:e});return{status:r.data.status,message:r.data.message,email:r.data.email,temporaryToken:r.data.temporaryToken}}catch(r){return console.error("Error changing email:",r),{status:"error",message:((a=(s=r.response)==null?void 0:s.data)==null?void 0:a.message)||"Failed to change email, please try again."}}},verifyEmail:async(t,e)=>{var s,a;try{const r=await n.post("/account/verify-email",{email:t,code:e});return{status:r.data.status,message:r.data.message}}catch(r){return console.error("Error verifying email:",r),{status:"error",message:((a=(s=r.response)==null?void 0:s.data)==null?void 0:a.message)||"Failed to verify email, please try again."}}}};async function i(t){return await o.setUser({token:t.token,refresh_token:t.refresh_token,expires_at:t.expires_at,refresh_expires_at:t.refresh_expires_at}),!0}export{u as A};
